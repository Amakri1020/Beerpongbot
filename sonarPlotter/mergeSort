int[] mergeSort(int[] array, int arraySize){
  if (arraySize <= 1) return array
  int mid = arraySize/2;
  int leftArray[mid];
  int rightArray[arraySize - mid];
  int sortedArray[arraySize];
  for (int i = 0; i < mid; i++){
    leftArray[i] = array[i];
  }
  for (int i = 0; i < arraySize - mid; i++){
    rightArray[i] = array[mid + i];
  }
  mergeSort(leftArray, mid);
  mergeSort(rightArray, arraySize-mid);
  sortedArray = merge(leftArray, mid, rightArray, arraySize-mid);
  return sortedArray;
}

int[] merge(int[] leftArray, int leftSize, int[] rightArray, int rightSize){
  int result[leftSize + rightSize];
  int leftIndex = 0;
  int rightIndex = 0;
  int index = 0;
  while (leftIndex < leftSize || rightIndex < rightSize){
    if (leftIndex < leftSize && rightIndex < rightSize){
      if (leftArray[leftIndex] < rightArray[rightIndex]){
        result[index] = leftArray[leftIndex];
        index++;
        leftIndex++;
        result[index] = rightArray[rightIndex];
        index++;
        rightIndex++;
      }else if(leftIndex < leftSize){
        result[index] = leftArray[leftIndex];
        index++;
        leftIndex++;
      }else{
        result[index] = rightArray[rightIndex];
        index++;
        rightIndex++;
      }
    }
  }
  return result;
}
